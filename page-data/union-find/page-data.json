{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/union-find/",
    "result": {"data":{"cur":{"id":"70df9d94-85b3-548a-95f4-9cdb30df550a","html":"<h2 id=\"disjoint-set-구조와-union-find-알고리즘이란\" style=\"position:relative;\"><a href=\"#disjoint-set-%EA%B5%AC%EC%A1%B0%EC%99%80-union-find-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"disjoint set 구조와 union find 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disjoint-set 구조와 Union-Find 알고리즘이란?</h2>\n<ul>\n<li>Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다.</li>\n<li>이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다.</li>\n</ul>\n<ol>\n<li>Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다.</li>\n<li>Union : 2개의 집합을 하나의 집합으로 합쳐준다.</li>\n</ol>\n<p><strong>이 알고리즘은 Cycle을 찾는데 아주 용이하다.</strong></p>\n<h2 id=\"union-find의-활용-코드-사이클-찾기\" style=\"position:relative;\"><a href=\"#union-find%EC%9D%98-%ED%99%9C%EC%9A%A9-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%B0%BE%EA%B8%B0\" aria-label=\"union find의 활용 코드 사이클 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union-Find의 활용 코드 (사이클 찾기)</h2>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-1.png\" alt=\"사진\"></p>\n<p>위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//해당 vertex가 어느 집합에 속했는지 확인시켜주는 노드이다.</span>\n<span class=\"token comment\">//두개의 vertex가 같은 집합에 있다면 find의 결과 값이 같을 것이다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//계속 타고 타고 가서 지금 parent가 없는 친구를 찾아보자(즉 그래프의 child node)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//만약 두개의 child node가 다르다면 두 노드를 이어줍시다. 하나의 그래프가 다른 그래프 밑으로 쏙 들어가게 된다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//둘의 childnode를 찾고 다르면 하나가 다른 하나를 먹자.</span>\n    <span class=\"token keyword\">int</span> xset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xset <span class=\"token operator\">!=</span> yset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">[</span>xset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yset<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//parent라는 어레이 변수를 생성하고 초기 값을 -1, 즉 부모가 없는 상태로 두자</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> graph<span class=\"token operator\">-></span>V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>주석을 확인하면 훨씬 이해가 빠를 것이다.</p>\n<h2 id=\"헷갈림-주의\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%BC-%EC%A3%BC%EC%9D%98\" aria-label=\"헷갈림 주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈림 주의!!</h2>\n<p>union을 하게 되면 같은 집합에 있는 원소의 child node가 같아지게 된다. 밑에 그림을 참고하자:)</p>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg\" alt=\"사진\"></p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>내가 bfs로 짰을 때보다 훨씬 효율적인지는 모르겠지만 일단 굉장히 직관적이다.</li>\n<li>두개의 집합을 합치는 방법도 어떻게 하지 했는데 child node를 이어주는 것 만으로 이것이 가능해다는 발상도 너무 좋다.</li>\n<li>아직 확실히 감은 안오지만 한번 도전해볼만 하다.</li>\n</ul>","excerpt":"Disjoint-set 구조와 Union-Find 알고리즘이란? Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다. 이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다. Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다. Union : 2개의 집합을 하나의 집합으로 합쳐준다. 이 알고리즘은 Cycle을 찾는데 아주 용이하다. Union-Find의 활용 코드 (사이클 찾기) 사진 위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자! 주석을 확인하면 훨씬 이해가 빠를 것이다. 헷갈림 주의!! union을 하게 되면 같은 집합에 있는 원소의 child node가 같아지게 된다. 밑에 그림을 참고하자:) 사진 느낀점 내가 bfs로 짰을 때보다 훨씬 효율적인지는 모르겠지만 일단 굉장히 직관적이다. 두개의 집합을 합치는 방법도…","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Disjoint Set 구조와 Union Find 알고리즘","categories":"알고리즘","author":"줌코딩","emoji":"💪"},"fields":{"slug":"/union-find/"}},"next":null,"prev":null,"site":{"siteMetadata":{"siteUrl":"https://sunwh4l3.github.io","comments":{"utterances":{"repo":"sunwh4l3/sunwh4l3.github.io"}}}}},"pageContext":{"slug":"/union-find/","nextSlug":"","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}